// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Models;

#nullable disable

namespace WebAPP.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241112164417_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("WebAPP.Models.OrganizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NIP")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Regon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("organizations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 203,
                            NIP = "123321123",
                            Name = "XD2",
                            Regon = "4432234432"
                        },
                        new
                        {
                            Id = 303,
                            NIP = "5345345345",
                            Name = "xpp",
                            Regon = "4412322112"
                        });
                });

            modelBuilder.Entity("WebApp.Models.Services.ContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("birth_date");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("contacts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateOnly(1990, 1, 1),
                            Category = 0,
                            Created = new DateTime(2024, 11, 12, 17, 44, 16, 683, DateTimeKind.Local).AddTicks(4770),
                            Email = "",
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            OrganizationId = 203,
                            PhoneNumber = "123 456 789"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateOnly(1995, 5, 5),
                            Category = 0,
                            Created = new DateTime(2024, 11, 12, 17, 44, 16, 683, DateTimeKind.Local).AddTicks(4817),
                            Email = "",
                            FirstName = "Anna",
                            LastName = "Nowak",
                            OrganizationId = 203,
                            PhoneNumber = "987 654 321"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateOnly(2000, 10, 10),
                            Category = 0,
                            Created = new DateTime(2024, 11, 12, 17, 44, 16, 683, DateTimeKind.Local).AddTicks(4821),
                            Email = "",
                            FirstName = "Piotr",
                            LastName = "Wiśniewski",
                            OrganizationId = 203,
                            PhoneNumber = "456 789 123"
                        });
                });

            modelBuilder.Entity("WebAPP.Models.OrganizationEntity", b =>
                {
                    b.OwnsOne("WebAPP.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrganizationEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("OrganizationEntityId");

                            b1.ToTable("organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationEntityId");

                            b1.HasData(
                                new
                                {
                                    OrganizationEntityId = 203,
                                    City = "Jezusuf",
                                    Street = "Błotna 13"
                                },
                                new
                                {
                                    OrganizationEntityId = 303,
                                    City = "Górełecko",
                                    Street = "Zachalapana 5"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Services.ContactEntity", b =>
                {
                    b.HasOne("WebAPP.Models.OrganizationEntity", "Organization")
                        .WithMany("Contacts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("WebAPP.Models.OrganizationEntity", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
